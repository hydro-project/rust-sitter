---
source: macro/src/lib.rs
expression: "rustfmt_code(&expand_grammar(parse_quote! {\n                            #[rust_sitter :: grammar(\"test\")] mod grammar\n                            {\n                                #[rust_sitter :: language] pub enum Expression\n                                {\n                                    Number(#[rust_sitter ::\n                                    leaf(pattern = r\"\\d+\", transform = | v |\n                                    v.parse().unwrap())] i32), #[rust_sitter :: prec_left(1)]\n                                    Sub(Box < Expression >, #[rust_sitter :: leaf(text = \"-\")]\n                                    (), Box < Expression >),\n                                }\n                            }\n                        }).to_token_stream().to_string())"
---
mod grammar {
    pub enum Expression {
        Number(i32),
        Sub(Box<Expression>, (), Box<Expression>),
    }
    impl rust_sitter::Extract<Expression> for Expression {
        type LeafFn = ();
        #[allow(non_snake_case)]
        fn extract(
            node: Option<rust_sitter::tree_sitter::Node>,
            source: &[u8],
            _last_idx: usize,
            _leaf_fn: Option<&Self::LeafFn>,
        ) -> Self {
            let node = node.unwrap();
            #[allow(non_snake_case)]
            #[allow(clippy::unused_unit)]
            fn extract_Expression_Number_0(
                cursor_opt: &mut Option<rust_sitter::tree_sitter::TreeCursor>,
                source: &[u8],
                last_idx: &mut usize,
            ) -> i32 {
                rust_sitter::__private::extract_field(
                    cursor_opt,
                    last_idx,
                    "0",
                    move |node, last_idx| {
                        <rust_sitter::WithLeaf<i32> as rust_sitter::Extract<_>>::extract(
                            node,
                            source,
                            *last_idx,
                            Some(&|v| v.parse().unwrap()),
                        )
                    },
                )
            }
            #[allow(non_snake_case)]
            fn extract_Expression_Number(
                node: rust_sitter::tree_sitter::Node,
                source: &[u8],
            ) -> Expression {
                rust_sitter::__private::extract_struct_or_variant(node, move |cursor, last_idx| {
                    Expression::Number(extract_Expression_Number_0(cursor, source, last_idx))
                })
            }
            #[allow(non_snake_case)]
            #[allow(clippy::unused_unit)]
            fn extract_Expression_Sub_0(
                cursor_opt: &mut Option<rust_sitter::tree_sitter::TreeCursor>,
                source: &[u8],
                last_idx: &mut usize,
            ) -> Box<Expression> {
                rust_sitter::__private::extract_field(
                    cursor_opt,
                    last_idx,
                    "0",
                    move |node, last_idx| {
                        <Box<Expression> as rust_sitter::Extract<_>>::extract(
                            node, source, *last_idx, None,
                        )
                    },
                )
            }
            #[allow(non_snake_case)]
            #[allow(clippy::unused_unit)]
            fn extract_Expression_Sub_1(
                cursor_opt: &mut Option<rust_sitter::tree_sitter::TreeCursor>,
                source: &[u8],
                last_idx: &mut usize,
            ) -> () {
                rust_sitter::__private::extract_field(
                    cursor_opt,
                    last_idx,
                    "1",
                    move |node, last_idx| {
                        <() as rust_sitter::Extract<_>>::extract(node, source, *last_idx, None)
                    },
                )
            }
            #[allow(non_snake_case)]
            #[allow(clippy::unused_unit)]
            fn extract_Expression_Sub_2(
                cursor_opt: &mut Option<rust_sitter::tree_sitter::TreeCursor>,
                source: &[u8],
                last_idx: &mut usize,
            ) -> Box<Expression> {
                rust_sitter::__private::extract_field(
                    cursor_opt,
                    last_idx,
                    "2",
                    move |node, last_idx| {
                        <Box<Expression> as rust_sitter::Extract<_>>::extract(
                            node, source, *last_idx, None,
                        )
                    },
                )
            }
            #[allow(non_snake_case)]
            fn extract_Expression_Sub(
                node: rust_sitter::tree_sitter::Node,
                source: &[u8],
            ) -> Expression {
                rust_sitter::__private::extract_struct_or_variant(node, move |cursor, last_idx| {
                    Expression::Sub(
                        extract_Expression_Sub_0(cursor, source, last_idx),
                        extract_Expression_Sub_1(cursor, source, last_idx),
                        extract_Expression_Sub_2(cursor, source, last_idx),
                    )
                })
            }
            let mut cursor = node.walk();
            assert!(cursor.goto_first_child());
            loop {
                let n = cursor.node();
                match n.kind() {
                    "Expression_Number" => return extract_Expression_Number(n, source),
                    "Expression_Sub" => return extract_Expression_Sub(n, source),
                    _ => {
                        if !cursor.goto_next_sibling() {
                            panic!("Could not find a child corresponding to any enum branch")
                        }
                    }
                }
            }
        }
    }
    extern "C" {
        fn tree_sitter_test() -> rust_sitter::tree_sitter::Language;
    }
    pub fn language() -> rust_sitter::tree_sitter::Language {
        unsafe { tree_sitter_test() }
    }
    pub fn parse(
        input: &str,
    ) -> core::result::Result<Expression, Vec<rust_sitter::errors::ParseError>> {
        let mut parser = rust_sitter::tree_sitter::Parser::new();
        parser.set_language(language()).unwrap();
        let tree = parser.parse(input, None).unwrap();
        let root_node = tree.root_node();
        if root_node.has_error() {
            let mut errors = vec![];
            rust_sitter::errors::collect_parsing_errors(&root_node, input.as_bytes(), &mut errors);
            Err(errors)
        } else {
            use rust_sitter::Extract;
            Ok(<Expression as rust_sitter::Extract<_>>::extract(
                Some(root_node),
                input.as_bytes(),
                0,
                None,
            ))
        }
    }
}

