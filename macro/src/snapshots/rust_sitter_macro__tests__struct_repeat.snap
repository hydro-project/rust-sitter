---
source: macro/src/lib.rs
expression: "rustfmt_code(&expand_grammar(parse_quote! {\n                                #[rust_sitter :: grammar(\"test\")] mod grammar\n                                {\n                                    #[rust_sitter :: language] pub struct NumberList\n                                    { numbers : Vec < Number >, } pub struct Number\n                                    {\n                                        #[rust_sitter ::\n                                        leaf(pattern = r\"\\d+\", transform = | v |\n                                        v.parse().unwrap())] v : i32\n                                    } #[rust_sitter :: extra] struct Whitespace\n                                    {\n                                        #[rust_sitter :: leaf(pattern = r\"\\s\")] _whitespace : (),\n                                    }\n                                }\n                            })?.to_token_stream().to_string())"
---
mod grammar {
    pub struct NumberList {
        numbers: Vec<Number>,
    }
    impl ::rust_sitter::Extract<NumberList> for NumberList {
        type LeafFn = ();
        #[allow(non_snake_case)]
        fn extract(
            node: Option<::rust_sitter::tree_sitter::Node>,
            source: &[u8],
            last_idx: usize,
            _leaf_fn: Option<&Self::LeafFn>,
        ) -> Self {
            let node = node.unwrap();
            ::rust_sitter::__private::extract_struct_or_variant(node, move |cursor, last_idx| {
                NumberList {
                    numbers: {
                        ::rust_sitter::__private::extract_field::<Vec<Number>, _>(
                            cursor, source, last_idx, "numbers", None,
                        )
                    },
                }
            })
        }
    }
    pub struct Number {
        v: i32,
    }
    impl ::rust_sitter::Extract<Number> for Number {
        type LeafFn = ();
        #[allow(non_snake_case)]
        fn extract(
            node: Option<::rust_sitter::tree_sitter::Node>,
            source: &[u8],
            last_idx: usize,
            _leaf_fn: Option<&Self::LeafFn>,
        ) -> Self {
            let node = node.unwrap();
            ::rust_sitter::__private::extract_struct_or_variant(node, move |cursor, last_idx| {
                Number {
                    v: {
                        ::rust_sitter::__private::extract_field::<rust_sitter::WithLeaf<i32>, _>(
                            cursor,
                            source,
                            last_idx,
                            "v",
                            Some(&|v| v.parse().unwrap()),
                        )
                    },
                }
            })
        }
    }
    struct Whitespace {
        _whitespace: (),
    }
    impl ::rust_sitter::Extract<Whitespace> for Whitespace {
        type LeafFn = ();
        #[allow(non_snake_case)]
        fn extract(
            node: Option<::rust_sitter::tree_sitter::Node>,
            source: &[u8],
            last_idx: usize,
            _leaf_fn: Option<&Self::LeafFn>,
        ) -> Self {
            let node = node.unwrap();
            ::rust_sitter::__private::extract_struct_or_variant(node, move |cursor, last_idx| {
                Whitespace {
                    _whitespace: {
                        ::rust_sitter::__private::extract_field::<(), _>(
                            cursor,
                            source,
                            last_idx,
                            "_whitespace",
                            None,
                        )
                    },
                }
            })
        }
    }
    extern "C" {
        fn tree_sitter_test() -> ::rust_sitter::tree_sitter::Language;
    }
    pub fn language() -> ::rust_sitter::tree_sitter::Language {
        unsafe { tree_sitter_test() }
    }
    #[doc = r" Parse an input string according to the grammar. Returns either any parsing errors that happened, or a"]
    #[doc = "[`NumberList`]"]
    #[doc = r" instance containing the parsed structured data."]
    pub fn parse(
        input: &str,
    ) -> core::result::Result<NumberList, Vec<::rust_sitter::errors::ParseError>> {
        ::rust_sitter::__private::parse::<NumberList>(input, language)
    }
}

