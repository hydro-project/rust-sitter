---
source: macro/src/lib.rs
expression: "rustfmt_code(&expand_grammar(parse_quote! {\n                                #[rust_sitter :: grammar(\"test\")] mod grammar\n                                {\n                                    #[rust_sitter :: language] pub enum Expression\n                                    {\n                                        Number(#[rust_sitter ::\n                                        leaf(pattern = r\"\\d+\", transform = | v |\n                                        v.parse().unwrap())] i32,),\n                                    } #[rust_sitter :: extra] struct Whitespace\n                                    {\n                                        #[rust_sitter :: leaf(pattern = r\"\\s\")] _whitespace : (),\n                                    }\n                                }\n                            })?.to_token_stream().to_string())"
---
mod grammar {
    pub enum Expression {
        Number(i32),
    }
    impl ::rust_sitter::Extract<Expression> for Expression {
        type LeafFn = ();
        #[allow(non_snake_case)]
        fn extract(
            node: Option<::rust_sitter::tree_sitter::Node>,
            source: &[u8],
            _last_idx: usize,
            _leaf_fn: Option<&Self::LeafFn>,
        ) -> Self {
            let node = node.unwrap();
            let mut cursor = node.walk();
            assert!(
                cursor.goto_first_child(),
                "Could not find a child corresponding to any enum branch"
            );
            loop {
                let node = cursor.node();
                match node.kind() {
                    "Expression_Number" => {
                        return ::rust_sitter::__private::extract_struct_or_variant(
                            node,
                            move |cursor, last_idx| {
                                Expression::Number({
                                    ::rust_sitter::__private::extract_field::<
                                        rust_sitter::WithLeaf<i32>,
                                        _,
                                    >(
                                        cursor, source, last_idx, "0", Some(&|v| v.parse().unwrap())
                                    )
                                })
                            },
                        )
                    }
                    _ => {
                        if !cursor.goto_next_sibling() {
                            panic!("Could not find a child corresponding to any enum branch")
                        }
                    }
                }
            }
        }
    }
    struct Whitespace {
        _whitespace: (),
    }
    impl ::rust_sitter::Extract<Whitespace> for Whitespace {
        type LeafFn = ();
        #[allow(non_snake_case)]
        fn extract(
            node: Option<::rust_sitter::tree_sitter::Node>,
            source: &[u8],
            last_idx: usize,
            _leaf_fn: Option<&Self::LeafFn>,
        ) -> Self {
            let node = node.unwrap();
            ::rust_sitter::__private::extract_struct_or_variant(node, move |cursor, last_idx| {
                Whitespace {
                    _whitespace: {
                        ::rust_sitter::__private::extract_field::<(), _>(
                            cursor,
                            source,
                            last_idx,
                            "_whitespace",
                            None,
                        )
                    },
                }
            })
        }
    }
    extern "C" {
        fn tree_sitter_test() -> ::rust_sitter::tree_sitter::Language;
    }
    pub fn language() -> ::rust_sitter::tree_sitter::Language {
        unsafe { tree_sitter_test() }
    }
    #[doc = r" Parse an input string according to the grammar. Returns either any parsing errors that happened, or a"]
    #[doc = "[`Expression`]"]
    #[doc = r" instance containing the parsed structured data."]
    pub fn parse(
        input: &str,
    ) -> core::result::Result<Expression, Vec<::rust_sitter::errors::ParseError>> {
        ::rust_sitter::__private::parse::<Expression>(input, language)
    }
}

